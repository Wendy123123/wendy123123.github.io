<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wendy-banzhuanke.github.io</id>
    <title>wendy-banzhuanke</title>
    <updated>2020-10-14T04:46:06.172Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wendy-banzhuanke.github.io"/>
    <link rel="self" href="https://wendy-banzhuanke.github.io/atom.xml"/>
    <subtitle>快乐是赏赐，悲伤是考验，不快乐也不悲伤，是生活的常态</subtitle>
    <logo>https://wendy-banzhuanke.github.io/images/avatar.png</logo>
    <icon>https://wendy-banzhuanke.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, wendy-banzhuanke</rights>
    <entry>
        <title type="html"><![CDATA[express-post的req.body总是undefined的原因]]></title>
        <id>https://wendy-banzhuanke.github.io/express-post-de-reqbody-zong-shi-undefined-de-yuan-yin/</id>
        <link href="https://wendy-banzhuanke.github.io/express-post-de-reqbody-zong-shi-undefined-de-yuan-yin/">
        </link>
        <updated>2020-09-22T01:31:46.000Z</updated>
        <summary type="html"><![CDATA[<p>因为express将body-parser分离了出来，所以你需要手动注入body-parser库</p>
]]></summary>
        <content type="html"><![CDATA[<p>因为express将body-parser分离了出来，所以你需要手动注入body-parser库</p>
<!-- more -->
<p>需要手动添加进下面的内容即可</p>
<pre><code class="language-javascript">var path = require('path');
var bodyParser = require('body-parser');//用于req.body获取值的
app.use(bodyParser.json());
// 创建 application/x-www-form-urlencoded 编码解析
app.use(bodyParser.urlencoded({ extended: false }));
</code></pre>
<p>如果传输的内容非string类型时，也总是会得到undefined的结果， 需要对上面的配置进行如下修改：</p>
<pre><code class="language-javascript">app.use(bodyParser.urlencoded({ extended: true}));
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[V8是如何执行一段js代码的]]></title>
        <id>https://wendy-banzhuanke.github.io/v8-shi-ru-he-zhi-xing-yi-duan-js-dai-ma-de/</id>
        <link href="https://wendy-banzhuanke.github.io/v8-shi-ru-he-zhi-xing-yi-duan-js-dai-ma-de/">
        </link>
        <updated>2019-07-16T08:01:37.000Z</updated>
        <summary type="html"><![CDATA[<p>要深入理解 V8 的工作原理，先需要搞清楚一些概念和原理。</p>
]]></summary>
        <content type="html"><![CDATA[<p>要深入理解 V8 的工作原理，先需要搞清楚一些概念和原理。</p>
<!-- more -->
<h3 id="了解">了解</h3>
<h4 id="编译型语言">编译型语言</h4>
<p>C/C++、GO</p>
<h4 id="解释型语言">解释型语言</h4>
<p>Python、JavaScript</p>
<h4 id="编译器compiler">编译器（Compiler）</h4>
<p>编译型语言在程序执行之前，先通过编译器编译成机器能读懂的二进制文件 并保留；<br>
每次在程序执行时，直接运行该二进制文件，无需重新编译</p>
<h4 id="解释器interpreter">解释器（Interpreter）</h4>
<p>解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。</p>
<h4 id="抽象语法树ast">抽象语法树（AST）</h4>
<p>如下代码：</p>
<pre><code class="language-javascript">var myName = &quot;你好，代码&quot;
function foo(){
  return 23;
}
myName = &quot;hello code&quot;
foo()
</code></pre>
<p>转成AST树（与HTML代码转换成DOM树类似）：<br>
<img src="https://wendy-banzhuanke.github.io/post-images/1597918044261.png" alt="" loading="lazy"></p>
<p>AST 是非常重要的一种数据结构，在很多项目中都有应用。如Babel、ESLint，Babel 是一个被广泛使用的代码转码器，可以将 ES6 代码转为 ES5 代码，这意味着你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持 ES6。Babel 的工作原理就是先将 ES6 源码转换为 AST，然后再将 ES6 语法的 AST 转换为 ES5 语法的 AST，最后利用 ES5 的 AST 生成 JavaScript 源代码。</p>
<h4 id="字节码bytecode">字节码（Bytecode）</h4>
<p>字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。</p>
<h4 id="即时编译器jit">即时编译器（JIT)</h4>
<p>字节码配合解释器和编译器，比如 Java 和 Python 的虚拟机也都是基于这种技术实现的。</p>
<figure data-type="image" tabindex="1"><img src="https://wendy-banzhuanke.github.io/post-images/1597915007180.png" alt="" loading="lazy"></figure>
<p>具体到 V8，就是指解释器 Ignition 在解释执行字节码的同时，收集代码信息，当它发现某一部分代码变热了之后，TurboFan 编译器便闪亮登场，把热点的字节码转换为机器码，并把转换后的机器码保存起来，以备下次使用。</p>
<h3 id="执行代码">执行代码</h3>
<p>通过解释器将AST树生成字节码之后，解释器 Ignition 会逐条解释执行字节码。<br>
在 Ignition 执行字节码的过程中，如果发现有热点代码（HotSpot），比如一段代码被重复执行多次，这种就称为“热点代码”，那么后台的编译器 TurboFan 就会把该段热点的字节码编译为高效的机器码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大大提升了代码的执行效率。</p>
<h3 id="javascript-的性能优化">JavaScript 的性能优化</h3>
<p>对于优化 JavaScript 执行效率，你应该将优化的中心聚焦在单次脚本的执行时间和脚本的网络下载上，主要关注以下三点内容：</p>
<ol>
<li>提升单次脚本的执行速度，避免 JavaScript 的长任务霸占主线程，这样可以使得页面快速响应交互；</li>
<li>避免大的内联脚本，因为在解析 HTML 的过程中，解析和编译也会占用主线程；</li>
<li>减少 JavaScript 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈JS函数柯里化]]></title>
        <id>https://wendy-banzhuanke.github.io/qian-tan-js-han-shu-ke-li-hua/</id>
        <link href="https://wendy-banzhuanke.github.io/qian-tan-js-han-shu-ke-li-hua/">
        </link>
        <updated>2018-09-13T14:48:20.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebAPI之setTimeout实现]]></title>
        <id>https://wendy-banzhuanke.github.io/webapi-zhi-settimeout-shi-xian/</id>
        <link href="https://wendy-banzhuanke.github.io/webapi-zhi-settimeout-shi-xian/">
        </link>
        <updated>2018-08-08T11:52:52.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>浏览器页面是通过消息队列和时间循环来驱动的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么是Event Loop]]></title>
        <id>https://wendy-banzhuanke.github.io/1-shi-me-shi-event-loop/</id>
        <link href="https://wendy-banzhuanke.github.io/1-shi-me-shi-event-loop/">
        </link>
        <updated>2017-02-14T01:16:28.000Z</updated>
        <summary type="html"><![CDATA[<p>Event loop是一个执行事件的模型，规定了一些特定函数的执行时机。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Event loop是一个执行事件的模型，规定了一些特定函数的执行时机。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</p>
<!-- more -->
<ul>
<li>浏览器的Event Loop 是在 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops">html5的规范</a>中明确定义，但具体的实现是各自浏览器厂商实现的。</li>
<li>NodeJs的Event Loop是基于libuv实现的。<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">参考Node的官方文档</a>以及<a href="http://docs.libuv.org/en/v1.x/design.html">libuv的官方文档</a></li>
</ul>
<h3 id="2-宏队列和微队列">2. 宏队列和微队列</h3>
<p><strong>宏队列，macrotask, 也叫tasks。</strong> 部分异步任务的回调依次进入macro task queue, 等待后续被调用，这些异步任务包括：</p>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate(Node独有)</li>
<li>requestAnimationFrame(浏览器独有)</li>
<li>I/O</li>
<li>UI rendering(浏览器独有)</li>
</ul>
<p><strong>微队列，microtask, 也叫jobs。</strong> 部分异步任务的回调依次进入micro task queue, 等待后续被调用，这些异步任务包括</p>
<ul>
<li>process.nextTick(Node独有)</li>
<li>Promise</li>
<li>Object.observe</li>
<li>MutationObserver</li>
</ul>
<h3 id="3-浏览器的event-loop">3. 浏览器的Event Loop</h3>
<figure data-type="image" tabindex="1"><img src="https://wendy-banzhuanke.github.io/post-images/1591154491005.png" alt="Image text" loading="lazy"></figure>
<p>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p>
<ol>
<li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li>
<li>全局Script代码执行完毕后，调用栈Stack会清空；</li>
<li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li>
<li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</li>
<li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li>
<li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li>
<li>执行完毕后，调用栈Stack为空；</li>
<li>重复第3-7个步骤；</li>
<li>重复第3-7个步骤；</li>
<li>......</li>
</ol>
<p>这就是浏览器的事件循环Event Loop<br>
简单归纳三步重点：</p>
<ol>
<li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li>
<li>微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</li>
<li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li>
</ol>
<p><strong>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。</strong></p>
<blockquote>
<p>注：如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个。</p>
</blockquote>
<!-- more -->]]></content>
    </entry>
</feed>