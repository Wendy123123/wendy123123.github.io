<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wendy-banzhuanke.github.io</id>
    <title>wendy-banzhuanke</title>
    <updated>2020-10-16T15:53:15.777Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wendy-banzhuanke.github.io"/>
    <link rel="self" href="https://wendy-banzhuanke.github.io/atom.xml"/>
    <subtitle>撸起袖子加油干！</subtitle>
    <logo>https://wendy-banzhuanke.github.io/images/avatar.png</logo>
    <icon>https://wendy-banzhuanke.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, wendy-banzhuanke</rights>
    <entry>
        <title type="html"><![CDATA[this详解]]></title>
        <id>https://wendy-banzhuanke.github.io/5X0KNEw2g/</id>
        <link href="https://wendy-banzhuanke.github.io/5X0KNEw2g/">
        </link>
        <updated>2020-10-16T15:50:30.000Z</updated>
        <summary type="html"><![CDATA[<p>this关键字是JavaScript中最复杂的机制之一。它会被自动定义在所有函数的作用域中。ES6中的箭头函数，ES7中的函数绑定运算符等，都是重新定义了this的调用位置。</p>
]]></summary>
        <content type="html"><![CDATA[<p>this关键字是JavaScript中最复杂的机制之一。它会被自动定义在所有函数的作用域中。ES6中的箭头函数，ES7中的函数绑定运算符等，都是重新定义了this的调用位置。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS模块化]]></title>
        <id>https://wendy-banzhuanke.github.io/js-file-module/</id>
        <link href="https://wendy-banzhuanke.github.io/js-file-module/">
        </link>
        <updated>2019-08-13T10:53:15.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>模块的核心就是创建独立的作用域</strong>。早期，前端无模块化时代，经常会遇到几个问题，怎么复用一段代码？怎么避免多人协作时命名冲突？如何管理当前文件的依赖？JavaScript模块化的出现有效的解决了上述问题，但JavaScript模块化之路充满了坎坷。</p>
<p>下面我们由近及远来梳理一下JavaScript模块发展史上那些著名的模块规范与实现。</p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>模块的核心就是创建独立的作用域</strong>。早期，前端无模块化时代，经常会遇到几个问题，怎么复用一段代码？怎么避免多人协作时命名冲突？如何管理当前文件的依赖？JavaScript模块化的出现有效的解决了上述问题，但JavaScript模块化之路充满了坎坷。</p>
<p>下面我们由近及远来梳理一下JavaScript模块发展史上那些著名的模块规范与实现。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[V8是如何执行一段js代码的]]></title>
        <id>https://wendy-banzhuanke.github.io/js-file-v8/</id>
        <link href="https://wendy-banzhuanke.github.io/js-file-v8/">
        </link>
        <updated>2019-01-07T08:01:37.000Z</updated>
        <summary type="html"><![CDATA[<p>众所周知，我们通过编程语言完成的程序是通过处理器运行的。但是处理器不能直接理解我们通过高级语言（如C++、Go、JavaScript等）编写的代码，只能理解机器码，所以在执行程序之前，需要经过一系列的步骤，将我们编写的代码翻译成机器语言。这个过程一般是由编译器（Compiler） 或者解释器（Interpreter） 来完成。</p>
<p>要深入理解 V8 的工作原理，先需要搞清楚一些概念和原理。</p>
]]></summary>
        <content type="html"><![CDATA[<p>众所周知，我们通过编程语言完成的程序是通过处理器运行的。但是处理器不能直接理解我们通过高级语言（如C++、Go、JavaScript等）编写的代码，只能理解机器码，所以在执行程序之前，需要经过一系列的步骤，将我们编写的代码翻译成机器语言。这个过程一般是由编译器（Compiler） 或者解释器（Interpreter） 来完成。</p>
<p>要深入理解 V8 的工作原理，先需要搞清楚一些概念和原理。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[this详解]]></title>
        <id>https://wendy-banzhuanke.github.io/js-file-this/</id>
        <link href="https://wendy-banzhuanke.github.io/js-file-this/">
        </link>
        <updated>2019-01-04T15:50:30.000Z</updated>
        <summary type="html"><![CDATA[<p>this关键字是JavaScript中最复杂的机制之一。它会被自动定义在所有函数的作用域中。ES6中的箭头函数，ES7中的函数绑定运算符等，都是重新定义了this的调用位置。</p>
]]></summary>
        <content type="html"><![CDATA[<p>this关键字是JavaScript中最复杂的机制之一。它会被自动定义在所有函数的作用域中。ES6中的箭头函数，ES7中的函数绑定运算符等，都是重新定义了this的调用位置。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈JS函数柯里化]]></title>
        <id>https://wendy-banzhuanke.github.io/qian-tan-js-han-shu-ke-li-hua/</id>
        <link href="https://wendy-banzhuanke.github.io/qian-tan-js-han-shu-ke-li-hua/">
        </link>
        <updated>2018-09-13T14:48:20.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么是Event Loop]]></title>
        <id>https://wendy-banzhuanke.github.io/js-01-event-loop/</id>
        <link href="https://wendy-banzhuanke.github.io/js-01-event-loop/">
        </link>
        <updated>2018-01-02T01:16:28.000Z</updated>
        <summary type="html"><![CDATA[<p>Event loop是一个执行事件的模型，规定了一些特定函数的执行时机。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Event loop是一个执行事件的模型，规定了一些特定函数的执行时机。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</p>
]]></content>
    </entry>
</feed>