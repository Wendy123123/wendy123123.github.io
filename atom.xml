<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wendy-banzhuanke.github.io</id>
    <title>wendy-banzhuanke</title>
    <updated>2020-08-19T08:48:35.232Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wendy-banzhuanke.github.io"/>
    <link rel="self" href="https://wendy-banzhuanke.github.io/atom.xml"/>
    <subtitle>快乐是赏赐，悲伤是考验，不快乐也不悲伤，是生活的常态</subtitle>
    <logo>https://wendy-banzhuanke.github.io/images/avatar.png</logo>
    <icon>https://wendy-banzhuanke.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, wendy-banzhuanke</rights>
    <entry>
        <title type="html"><![CDATA[什么是Event Loop]]></title>
        <id>https://wendy-banzhuanke.github.io/post/1-shi-me-shi-event-loop/</id>
        <link href="https://wendy-banzhuanke.github.io/post/1-shi-me-shi-event-loop/">
        </link>
        <updated>2020-07-17T01:16:28.000Z</updated>
        <summary type="html"><![CDATA[<h6 id="event-loop是一个执行事件的模型规定了一些特定函数的执行时机-浏览器和nodejs基于不同的技术实现了各自的event-loop">Event loop是一个执行事件的模型，规定了一些特定函数的执行时机。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</h6>
]]></summary>
        <content type="html"><![CDATA[<h6 id="event-loop是一个执行事件的模型规定了一些特定函数的执行时机-浏览器和nodejs基于不同的技术实现了各自的event-loop">Event loop是一个执行事件的模型，规定了一些特定函数的执行时机。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</h6>
<!-- more -->
<ul>
<li>浏览器的Event Loop 是在 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops">html5的规范</a>中明确定义，但具体的实现是各自浏览器厂商实现的。</li>
<li>NodeJs的Event Loop是基于libuv实现的。<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">参考Node的官方文档</a>以及<a href="http://docs.libuv.org/en/v1.x/design.html">libuv的官方文档</a></li>
</ul>
<h3 id="2-宏队列和微队列">2. 宏队列和微队列</h3>
<p><strong>宏队列，macrotask, 也叫tasks。</strong> 部分异步任务的回调依次进入macro task queue, 等待后续被调用，这些异步任务包括：</p>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate(Node独有)</li>
<li>requestAnimationFrame(浏览器独有)</li>
<li>I/O</li>
<li>UI rendering(浏览器独有)</li>
</ul>
<p><strong>微队列，microtask, 也叫jobs。</strong> 部分异步任务的回调依次进入micro task queue, 等待后续被调用，这些异步任务包括</p>
<ul>
<li>process.nextTick(Node独有)</li>
<li>Promise</li>
<li>Object.observe</li>
<li>MutationObserver</li>
</ul>
<h3 id="3-浏览器的event-loop">3. 浏览器的Event Loop</h3>
<figure data-type="image" tabindex="1"><img src="https://wendy-banzhuanke.github.io/post-images/1591154491005.png" alt="Image text" loading="lazy"></figure>
<p>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p>
<ol>
<li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li>
<li>全局Script代码执行完毕后，调用栈Stack会清空；</li>
<li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li>
<li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</li>
<li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li>
<li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li>
<li>执行完毕后，调用栈Stack为空；</li>
<li>重复第3-7个步骤；</li>
<li>重复第3-7个步骤；</li>
<li>......</li>
</ol>
<p>这就是浏览器的事件循环Event Loop<br>
简单归纳三步重点：</p>
<ol>
<li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li>
<li>微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</li>
<li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li>
</ol>
<p><strong>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。</strong></p>
<blockquote>
<p>注：如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个。</p>
</blockquote>
<!-- more -->]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[V8是如何执行一段js代码的]]></title>
        <id>https://wendy-banzhuanke.github.io/post/v8-shi-ru-he-zhi-xing-yi-duan-js-dai-ma-de/</id>
        <link href="https://wendy-banzhuanke.github.io/post/v8-shi-ru-he-zhi-xing-yi-duan-js-dai-ma-de/">
        </link>
        <updated>2019-07-16T08:01:37.000Z</updated>
        <content type="html"><![CDATA[<p>要深入理解 V8 的工作原理，先需要搞清楚一些概念和原理。</p>
<p>####编译器（Compiler）</p>
<p>####解释器（Interpreter）<br>
####抽象语法树（AST）<br>
####字节码（Bytecode）<br>
####即时编译器（JIT</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://wendy-banzhuanke.github.io/post/hello-gridea/</id>
        <link href="https://wendy-banzhuanke.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>